// Calculator

// Expression: list of symbol to evaluate (result)
// Digit: number 0 to 9
// (): parenthesis
// "+ - / *": operator
// "+ - ": sign for positive / negative number
// .: is a dot (decimal)

// Calculation: [sign][digits] operator [sign][digit]

// Expression = list of Calculation

// Rule:

// An empty expression can only start with
// - Digit
// - (
// - sign
// - ., but we need to add a zero before
if (result === "") {
  if ("+-(0123456789".includes(button)) {
    return button;
  }
  if (".".includes(button)) {
    return "0.";
  }
}

// After a digit, you can only have
// - digit
// - operator
// - ), only if there are more ( than )
// .

if ("0123456789".includes(result[result.length - 1])) {
  const numberOfOpenP = (result.match(/\(/g) || []).length;
  const numberOfCloseP = (result.match(/\)/g) || []).length;
  if (
    "*/-+0123456789.".includes(result) ||
    (button.key === ")" && numberOfOpenP > numberOfCloseP)
  ) {
    return result + button;
  }
}

// After a (, you can only have *same as empty expression
// - Digit
// - (
// - sign
// - ., but we need to add a zero before

if (result.length - 1 === "(") {
  if ("+-(0123456789".includes(button)) {
    return result + button;
  }
  if (".".includes(button)) {
    return result + "0.";
  }
}

// After a ), you can only have
// - operator
// - ), only if there are more ( than )

if (result.length - 1 === ')'){
    if  ("/*-+".includes(button)){
        return result + button
    }
    if (")".includes(button) && numberOfOpenP > numberOfCloseP) {
        return result + button
    }
}


//QS: will we run into a problem in differentiating an operator from a sign? */
//For  + / , how do you know it's an operator, or a sign (7--)
// You need to watch what is before
// digit, ) -> operator
// operator, ( -> sign
// . -> cannot



// After an operator, you can only have
// - Digit
// - sign
// - (
// - ., but we need to add a zero before

if ((result.length - 2).includes('0123456789)')) //checking "digit, ) -> operator"
 {
    if ((result.length - 1).includes('/*+-')) {
        if ("+-(0123456789".includes(button)) {
            return result + button;
          }
          if (".".includes(button)) {
            return result + "0.";
          }
    }
}

// After a sign, you can only have
// - digit
// - (
// - ., but we need to add a zero before

if ((result.length - 2).includes('/*+-(')) {
    if (result.length - 1).includes('-+'){
        if ("0123456789(".includes(button)) {
            return result + button;
          }
          if (".".includes(button)) {
            return result + "0.";
          }
    }
}

//After a dot, you can only have
// - digit

if ((result.length - 1).includes('.')) {
    if ("0123456789".includes(button)) {
        return result + button;
      }
}

//adding this for issue 8:
//if there is a number directly outside of a parens with no operators
//do the operation inside the parens first and then multiply that by the number outside
//what its doing right now is it is doing the operation inside the parens,
// but then just affixing the number outside the parens to the result


