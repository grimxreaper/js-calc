{"version":3,"sources":["Components/ResultComponent.js","Components/KeyPadComponent.js","App.js","reportWebVitals.js","index.js"],"names":["ResultComponent","result","this","props","className","data-testid","Component","keypads","type","key","KeyPadComponent","map","keypad","name","onClick","e","React","App","state","counter","done","operate","undefined","originalLastNum","button","setState","includes","recordLastNum","changeKeys","calculate","reset","backspace","results","match","length","lastNum","substr","setCharAt","str","index","chr","substring","replace","numberOfOpenP","numberOfCloseP","console","log","closeParens","getLastChar","from","slice","roundedResult","expression","round","evaluate","addMultiplier","finalResult","tempResult","matches","isNaN","error","tempResultString","reg","parenthesisToCalculate","i","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.322b5526.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass ResultComponent extends Component {\n\n    render() {\n        let {result} = this.props;\n        return (\n            <div className=\"result\" data-testid=\"result\">\n                <p>{result}</p>\n            </div>\n    )\n        ;\n    }\n}\n\n\nexport default ResultComponent;","import React from \"react\";\n\nconst keypads = [\n  { type: \"operation\", key: \"(\" },\n  { type: \"operation\", key: \"CE\" },\n  { type: \"operation\", key: \")\" },\n  { type: \"operation\", key: \"AC\" },\n  { type: \"operation\", key: \"/\" },\n  { type: \"operation\", key: \"*\" },\n  { type: \"operation\", key: \"-\" },\n  { type: \"operation\", key: \"+\" },\n  { type: \"key\", key: 9 },\n  { type: \"key\", key: 8 },\n  { type: \"key\", key: 7 },\n  { type: \"key\", key: 6 },\n  { type: \"key\", key: 5 },\n  { type: \"key\", key: 4 },\n  { type: \"key\", key: 3 },\n  { type: \"key\", key: 2 },\n  { type: \"key\", key: 1 },\n  { type: \"key\", key: 0 },\n  { type: \"operation\", key: \"=\" },\n  { type: \"key\", key: \".\" },\n];\n\nclass KeyPadComponent extends React.Component {\n  render() {\n    return (\n      <div className=\"button\">\n        {keypads.map((keypad) => {\n          return (\n            <button\n              className=\"keypad\"\n              key={keypad.key}\n              name={keypad.key}\n              data-testid={keypad.key}\n              onClick={(e) => this.props.onClick(keypad)}\n            >\n              {keypad.key}\n            </button>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default KeyPadComponent;\n","import React from \"react\";\nimport \"./App.css\";\nimport ResultComponent from \"./Components/ResultComponent\";\nimport KeyPadComponent from \"./Components/KeyPadComponent\";\nimport { evaluate, round } from \"mathjs\";\n\nclass App extends React.Component {\n  state = {\n    result: \"\",\n    counter: 0,\n    done: false,\n    operate: undefined,\n    originalLastNum: \"\",\n  };\n\n  onClick = (button) => {\n    if (button.type === \"key\" || button.key === \"(\" || button.key === \")\") {\n      if (this.state.done) {\n        this.setState({\n          done: false,\n          originalLastNum: \"\",\n          result: button.key + \"\",\n        });\n      } else {\n        if (button.key === \"(\" || button.key === \")\") {\n          this.setState({\n            result: this.state.result + button.key,\n          });\n        } else {\n          if (\n            button.key === \".\" ||\n            (this.state.originalLastNum + \"\").includes(\".\")\n          ) {\n            this.setState({\n              //originalLastNum: this.state.originalLastNum + button.key,\n              originalLastNum: this.recordLastNum(\n                this.state.result + button.key\n              ),\n              result: this.state.result + button.key,\n            });\n          } else {\n            this.setState({\n              //originalLastNum: button.key,\n              originalLastNum: this.recordLastNum(\n                this.state.result + button.key\n              ),\n              result: this.state.result + button.key,\n            });\n          }\n        }\n      }\n    } else {\n      if (\n        button.key !== \"CE\" &&\n        button.key !== \"=\" &&\n        button.key !== \"(\" &&\n        button.key !== \"AC\" &&\n        button.key !== \")\"\n      ) {\n        this.setState({\n          operate: button.key,\n          //result: this.state.result + button.key,\n          result: this.changeKeys(this.state.result, button.key),\n        });\n      }\n    }\n    if (button.key === \"=\") {\n      this.calculate();\n    } else if (button.key === \"AC\") {\n      this.reset();\n    } else if (button.key === \"CE\") {\n      this.backspace();\n    }\n  };\n\n  recordLastNum = (result) => {\n    const regex = /[-+/*]{0,}[0-9]{1,}[.]{0,1}[0-9]*/g;\n    let results = result.match(regex) || [];\n    if (results.length === 0) {\n      return \"\";\n    }\n    //We need to take the last one\n    let lastNum = results[results.length - 1];\n    // If there is no operator -> we return the value\n    if (!\"-+/*\".includes(lastNum[0])) {\n      return lastNum;\n    }\n    this.setState({\n      operate: lastNum[0],\n    });\n    return lastNum.substr(1);\n  };\n\n  setCharAt = (str,index,chr) => {\n    if(index > str.length - 1) return str;\n    return str.substring(0,index) + chr + str.substring(index + 1);\n  }\n\n  changeKeys = (result, button) => {\n    if (\"(\".includes(button)) {\n      if (result.length > 1) {\n        //these few lines below, did not work to fix another bug\n\n        if (\"0123456789\".includes(result[result.length - 1])) {\n          //remove the previous number and return the last number\n          return result + button.replace(\"(\", \"*(\");\n        }\n      }\n    }\n    if (result === \"\") {\n      if (\"+-(0123456789\".includes(button)) {\n        return button;\n      }\n      if (\".\".includes(button)) {\n        return \"0.\";\n      }\n    }\n    if (\"0123456789\".includes(result[result.length - 1])) {\n      const numberOfOpenP = (result.match(/\\(/g) || []).length;\n      const numberOfCloseP = (result.match(/\\)/g) || []).length;\n      if (\n        \"*/-+0123456789.\".includes(button) ||\n        (button.key === \")\" && numberOfOpenP > numberOfCloseP)\n      ) {\n      \n        return result + button;\n      } else {\n        return result;\n      }\n    }\n    if (result[result.length - 1] === \"(\") {\n      if (\"+-(0123456789\".includes(button)) {\n        return result + button;\n      }\n      if (\".\".includes(button)) {\n        return result + \"0.\";\n      }\n    }\n    if (result[result.length - 1] === \")\") {\n      const numberOfOpenP = (result.match(/\\(/g) || []).length;\n      const numberOfCloseP = (result.match(/\\)/g) || []).length;\n      if (\"/*-+\".includes(button)) {\n        return result + button;\n      }\n      if (\")\".includes(button) && numberOfOpenP > numberOfCloseP) {\n        return result + button;\n      }\n    }\n\n    \n    //QS: will we run into a problem in differentiating an operator from a sign? */\n    //For  + / , how do you know it's an operator, or a sign (7--)\n    // You need to watch what is before\n    // digit, ) -> operator\n    // operator, ( -> sign\n    // . -> cannot\n\n    // After an operator, you can only have\n    // - Digit\n    // - sign\n    // - (\n    // - ., but we need to add a zero before\n\n\n\n    if (\"0123456789)\".includes(result[result.length - 2])) {\n      //checking \"digit, ) -> operator\"\n      if (\"/*+-\".includes(result[result.length - 1])) {\n        console.log('inside of line 220')\n        if (\"+-(0123456789\".includes(button)) {\n          return result + button;\n        }\n        if (\".\".includes(button)) {\n          return result + \"0.\";\n        }\n        if (\"/\".includes(button) && result[result.length -1] === \"-\") {\n          return this.setCharAt(result, result.length - 1, '/')\n        }\n        if (\"/\".includes(button) && result[result.length -1] === \"+\") {\n          return this.setCharAt(result, result.length - 1, '/')\n        }\n        if (\"*\".includes(button) && result[result.length -1] === \"-\") {\n          return this.setCharAt(result, result.length - 1, '*')\n        }\n        if (\"*\".includes(button) && result[result.length -1] === \"+\") {\n          return this.setCharAt(result, result.length - 1, '*')\n        }\n      }\n    }\n    if (\"/*+-(\".includes(result[result.length - 2])) {\n      console.log('inside of line 234')\n      if (\"-+\".includes(result[result.length - 1])) {\n        if (\"0123456789(\".includes(button)) {\n          return result + button;\n        }\n        if (\".\".includes(button)) {\n          return result + \"0.\";\n        }\n      }\n    }\n    if ((result[result.length - 1] || \"\").includes(\".\")) {\n      console.log(result[result.length - 1]);\n      if (\"0123456789\".includes(button)) {\n        return result + button;\n      }\n    }\n\n       //🪲 72.2 + doesn't work FIXED\n    if ((result || \"\").includes('.')) {\n\n      if (\"+-*/0123456789\".includes(button)) {\n        return result + button;\n      }\n    }\n\n    // 🪲 72(7+2 returns \"not yet coded\"\n\n\n    // operator + operator -> replace the first operator\n\n    // \"\" - - -> is not possible\n    //return \"not yet coded\";\n\n    return result;\n  };\n\n  closeParens = (result) => {\n    var numberOfOpenP = (result.match(/\\(/g) || []).length;\n    var numberOfCloseP = (result.match(/\\)/g) || []).length;\n    //this solution works but only if there is one parenthesis missing,\n    //instead, account for all parens missing\n\n    while (numberOfOpenP > numberOfCloseP) {\n      result = result + \")\";\n      numberOfOpenP--;\n    }\n    return result\n  };\n\n  getLastChar = (from) => {\n    return from.slice(-1);\n  };\n\n\n  roundedResult = (expression) => {\n    const digitAfterComma = 13;\n    round(evaluate(expression), digitAfterComma);\n  };\n\n  addMultiplier = (expression) => {\n    //Find all pattern Digit + (\n    //expression =\"1(2+6)+23(6+9)+(2+3)9\"\n\n    const digitAndP = /([0123456789])(\\()/g;\n    const pAndDigit = /(\\))([0123456789])/g;\n    // )( -> )*(\n    const pAndp = /(\\))(\\()/g;\n\n    //return the value\n    return expression\n      .replace(digitAndP, \"$1*$2\")\n      .replace(pAndDigit, \"$1*$2\")\n      .replace(pAndp, \"$1*$2\");\n\n\n  };\n\n\n\n  calculate = () => {\n    const { result, operate, originalLastNum } = this.state;\n    let finalResult = 0;\n    var tempResult = result;\n\n    // Special case with expression ending with operator, after CE use\n    if (\"-+*/\".includes(this.getLastChar(result))) {\n      tempResult = result.slice(0, -1);\n    }\n\n\n    tempResult = this.closeParens(tempResult) + \"\";\n    tempResult = this.addMultiplier(tempResult) + \"\";\n\n\n    // Handling double equal\n    // If I only have sign + digit(s) + dot + digit(s)\n    const regex = /-{0,1}[0123456789]*(\\.[0123456789]*){0,1}/g;\n    const matches = tempResult.match(regex) || [];\n    if (matches.length > 1 && matches[0] === tempResult) {\n      //I need to handle the double equal\n      if (\"+-/*\".includes(operate) && !isNaN(originalLastNum)) {\n        // finalResult = evaluate(result + operate + originalLastNum) + \"\";\n        try {\n          finalResult = this.roundedResult(tempResult + operate + originalLastNum) + \"\";\n        } catch(error) {\n\n          //throw error\n        }\n      }\n    } else {\n      var tempResultString = tempResult;\n      //We need to detect the non nested parenthesis\n      //Open ( and no other ( before the next close\n      // '(' 0123456789-+*/.(not (, not ) ) ')'\n      // ( + any number of the 15 chars + ) : (7+2) (-3.25478/+6.587)\n      const reg = /\\(([0123456789/*-+.]*)\\)/g;\n      var parenthesisToCalculate = tempResultString.match(reg) || [];\n      while (parenthesisToCalculate.length > 0) {\n        for (var i = 0; i < parenthesisToCalculate.length; i++) {\n          //we extract the first expression ex:  (2+5)\n          let expression = parenthesisToCalculate[i];\n          //We calculate the value ex: 7\n\n          try {\n            let tempResult = round(evaluate(expression), 13);\n\n            //We need to replace the expression by the calculation\n            tempResultString = tempResultString.replace(expression, tempResult);\n\n          } catch (error) {\n            //throw error\n          }\n        }\n\n        parenthesisToCalculate = tempResultString.match(reg) || [];\n      }\n      //In tempResultString we have the last expression withtout any ()\n\n      try {\n       finalResult = round(evaluate(tempResultString), 13);\n      } catch (error) {\n        //throw error\n      }\n      this.setState({\n        done: true,\n        result: finalResult + \"\",\n      });\n    }\n  }\n\n  reset = () => {\n    this.setState({\n      result: \"\",\n      operate: \"\",\n      done: false,\n      originalLastNum: \"\",\n    });\n  };\n\n  backspace = () => {\n    this.setState({\n      result: this.state.result.slice(0, -1),\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h1>Pocket Js Calculator</h1>\n        <div className=\"calculator-body\">\n          <ResultComponent result={this.state.result} />\n          <KeyPadComponent onClick={this.onClick} />\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\n    <App />,\n\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}